/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Proctoring as PrismaProctoring,
  Session as PrismaSession,
  User as PrismaUser,
} from "@prisma/client";

export class ProctoringServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProctoringCountArgs, "select">
  ): Promise<number> {
    return this.prisma.proctoring.count(args);
  }

  async proctorings(
    args: Prisma.ProctoringFindManyArgs
  ): Promise<PrismaProctoring[]> {
    return this.prisma.proctoring.findMany(args);
  }
  async proctoring(
    args: Prisma.ProctoringFindUniqueArgs
  ): Promise<PrismaProctoring | null> {
    return this.prisma.proctoring.findUnique(args);
  }
  async createProctoring(
    args: Prisma.ProctoringCreateArgs
  ): Promise<PrismaProctoring> {
    return this.prisma.proctoring.create(args);
  }
  async updateProctoring(
    args: Prisma.ProctoringUpdateArgs
  ): Promise<PrismaProctoring> {
    return this.prisma.proctoring.update(args);
  }
  async deleteProctoring(
    args: Prisma.ProctoringDeleteArgs
  ): Promise<PrismaProctoring> {
    return this.prisma.proctoring.delete(args);
  }

  async getSession(parentId: string): Promise<PrismaSession | null> {
    return this.prisma.proctoring
      .findUnique({
        where: { id: parentId },
      })
      .session();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.proctoring
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
