/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProctoringService } from "../proctoring.service";
import { ProctoringCreateInput } from "./ProctoringCreateInput";
import { Proctoring } from "./Proctoring";
import { ProctoringFindManyArgs } from "./ProctoringFindManyArgs";
import { ProctoringWhereUniqueInput } from "./ProctoringWhereUniqueInput";
import { ProctoringUpdateInput } from "./ProctoringUpdateInput";

export class ProctoringControllerBase {
  constructor(protected readonly service: ProctoringService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Proctoring })
  async createProctoring(
    @common.Body() data: ProctoringCreateInput
  ): Promise<Proctoring> {
    return await this.service.createProctoring({
      data: {
        ...data,

        session: data.session
          ? {
              connect: data.session,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        notes: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Proctoring] })
  @ApiNestedQuery(ProctoringFindManyArgs)
  async proctorings(@common.Req() request: Request): Promise<Proctoring[]> {
    const args = plainToClass(ProctoringFindManyArgs, request.query);
    return this.service.proctorings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        notes: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Proctoring })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async proctoring(
    @common.Param() params: ProctoringWhereUniqueInput
  ): Promise<Proctoring | null> {
    const result = await this.service.proctoring({
      where: params,
      select: {
        createdAt: true,
        id: true,
        notes: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Proctoring })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProctoring(
    @common.Param() params: ProctoringWhereUniqueInput,
    @common.Body() data: ProctoringUpdateInput
  ): Promise<Proctoring | null> {
    try {
      return await this.service.updateProctoring({
        where: params,
        data: {
          ...data,

          session: data.session
            ? {
                connect: data.session,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          notes: true,

          session: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Proctoring })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProctoring(
    @common.Param() params: ProctoringWhereUniqueInput
  ): Promise<Proctoring | null> {
    try {
      return await this.service.deleteProctoring({
        where: params,
        select: {
          createdAt: true,
          id: true,
          notes: true,

          session: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
