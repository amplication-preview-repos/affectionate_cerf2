/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Proctoring } from "./Proctoring";
import { ProctoringCountArgs } from "./ProctoringCountArgs";
import { ProctoringFindManyArgs } from "./ProctoringFindManyArgs";
import { ProctoringFindUniqueArgs } from "./ProctoringFindUniqueArgs";
import { CreateProctoringArgs } from "./CreateProctoringArgs";
import { UpdateProctoringArgs } from "./UpdateProctoringArgs";
import { DeleteProctoringArgs } from "./DeleteProctoringArgs";
import { Session } from "../../session/base/Session";
import { User } from "../../user/base/User";
import { ProctoringService } from "../proctoring.service";
@graphql.Resolver(() => Proctoring)
export class ProctoringResolverBase {
  constructor(protected readonly service: ProctoringService) {}

  async _proctoringsMeta(
    @graphql.Args() args: ProctoringCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Proctoring])
  async proctorings(
    @graphql.Args() args: ProctoringFindManyArgs
  ): Promise<Proctoring[]> {
    return this.service.proctorings(args);
  }

  @graphql.Query(() => Proctoring, { nullable: true })
  async proctoring(
    @graphql.Args() args: ProctoringFindUniqueArgs
  ): Promise<Proctoring | null> {
    const result = await this.service.proctoring(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Proctoring)
  async createProctoring(
    @graphql.Args() args: CreateProctoringArgs
  ): Promise<Proctoring> {
    return await this.service.createProctoring({
      ...args,
      data: {
        ...args.data,

        session: args.data.session
          ? {
              connect: args.data.session,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Proctoring)
  async updateProctoring(
    @graphql.Args() args: UpdateProctoringArgs
  ): Promise<Proctoring | null> {
    try {
      return await this.service.updateProctoring({
        ...args,
        data: {
          ...args.data,

          session: args.data.session
            ? {
                connect: args.data.session,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Proctoring)
  async deleteProctoring(
    @graphql.Args() args: DeleteProctoringArgs
  ): Promise<Proctoring | null> {
    try {
      return await this.service.deleteProctoring(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  async getSession(
    @graphql.Parent() parent: Proctoring
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Proctoring): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
